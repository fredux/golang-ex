apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: beego-example
  application: beego-example
message: |-
  Projeto criado como exemplo para o móduo de Plataforma como Serviço(PaaS) da Faculdade Senai Fatesg.
  Podemo utilizar os nomes das variáveis passadas como parâmetro : ${FACULDADE}.
metadata:
  name: fatesg-spa
  annotations:
    description: |-
      Template genérico para uma aplicação Web. Para mais informações sobre este template, incluindo considerações do OpenShift, por favor acesso o link
      https://dominio/openshift/templates/blob/master/README.md.

      AVISO: Este template não trabalha como dados persistentes.
    iconClass: icon-go-gopher
    tags: quickstart,golang,fatesg
    openshift.io/display-name: Example de aplicação GoLang para deploy
    openshift.io/documentation-url: https://github.com/fredux/golang-ex
    openshift.io/long-description: Este template foi criado na disciplina de Plataforma como Serviço
    openshift.io/provider-display-name: Faculdade Senai Fatesg
    openshift.io/support-url: https://senaigo.com.br

objects:
  #Configuracao SERVICE
  - apiVersion: v1
    #Geralmente a Service é na porta 8080
    kind: Service
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
        - name: web
          port: ${{APPLICATION_PORT}}
      selector:
        app: ${APPLICATION_NAME}  

 #Configuracao ROUTE
  - apiVersion: v1
    #Geralmente a ROUTE é na porta 80
    kind: Route
    metadata:
      annotations:
        description: Rota genérica criada para a aplicação ${APPLICATION_NAME}
        template.openshift.io/expose-uri: http://{.spec.host}{.spec.path}
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      port:
        targetPort: ${{APPLICATION_PORT}}
      to:
        kind: Service
        name: ${APPLICATION_NAME}

  - apiVersion: v1
    kind: ImageStream
    metadata:
      name: beego-example
      annotations: 
        description: Keeps track of changes in the application image
      labels:
        app: ${APPLICATION_NAME}
    spec:
      source:
        - type: Git
          git: 
            uri: ${SOURCE_REPOSITORY_URL}
            ref: ${SOURCE_REPOSITORY_REF} 
          contextDir: ${CONTEXT_DIR}    
      strategy: 
        type: Docker
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest  
       triggers:
        - type: ConfigChange
        - type: GitHub
        - github:
            secret: ${GITHUB_WEBHOOK_SECRET}
       postCommit: 
        script": go test -v ./...  
      
 ##Criar DeploymentConfig
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${APPLICATION_NAME}
        profile: dev
      name: ${APPLICATION_NAME}
    spec:
      #Quantas instâncias(Pods) serão criados.
      replicas: 1
      #Quantidade de revisões que serão apresentadas (listas) no deploymentoConfig
      revisionHistoryLimit: 2
      #Geralmente usamos o selector para indicar uma VM ou pool que máquinas que o openshift vai receber os PODS.
      #Selector é um texto (tag) que vc configura nos workers para identificar o objeto(vpc,pv, pvc).
      selector:
        app: ${APPLICATION_NAME}
      strategy:
        #https://docs.openshift.com/container-platform/4.5/applications/deployments/deployment-strategies.html
        rollingParams:
          timeoutSeconds: 3600
        type: Rolling
      template:
        metadata:
          name: ${APPLICATION_NAME}
          labels:
            app: ${APPLICATION_NAME}
        spec:
          containers:
            - env:
                #Você pode injetar valores do padrão hard coded
                - name: UNIVERSITY
                  value : 'Faculdade Senai Fatesg'
                #ou buscar arquivos de um configMap ou Secret ou referência
                #https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/
                - name: KUBERNETES_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
              image: ''
              #https://kubernetes.io/pt-br/docs/concepts/containers/images/
              #A política padrão de pull é IfNotPresent a qual faz com que o kubelet ignore o processo de pull da imagem,
              #caso a mesma já exista. Se você prefere sempre forçar o processo de pull, você pode seguir uma das opções abaixo:
              imagePullPolicy: IfNotPresent
              name: ${APPLICATION_NAME}
              port:
                - containerPort: ${{APPLICATION_PORT}}
                  name: web
                  protocol: TCP
      triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${APPLICATION_NAME}
            from:
              kind: ImageStreamTag
              name: ${APPLICATION_NAME}:latest
        - type: ConfigChange

  

 

 

parameters:
  - name: FACULDADE
    description: Nome da Faculdade - Texto enviado como parâmetro
    displayName: Nome da faculdade
    value: 'Faculdade Senai Fatesg'
    require: true

  - name: CONTEXT_DIR
    description: Set this to the relative path to your project if it is not in the root of your repository
  

  - name: APPLICATION_NAME
    description: Nome da aplicação que será criada no openshift, baseado neste template.
    displayName: Nome da aplicação
    require: true

  - name: APPLICATION_DOMAIN
    description:The exposed hostname that will route to the Beego service.
    displayName: The exposed hostname that will route to the Beego service
    value: beego-example.openshiftapps.com

  - name: SOURCE_REPOSITORY_URL
    description: Url do repsitório para fazer clone da aplicação.
    displayName: Source url
    value: https://github.com/fredux/golang-ex/
    require: true

  - name: APPLICATION_PORT
    description: Porta da aplicação.
    displayName: Porta da aplicação
    require: true
    value: "8080"


  - name: SOURCE_REPOSITORY_REF
    description: Branch de referência para fazer o checkout
    displayName: branch ref
    value: master
    require: true

  - name: SOURCE_REPOSITORY_DIR
    description: Diretório para checkout do projeto.
    displayName: Source directory
    value: .
    require: true

  - name: OUTPUT_DIR
    description: Diretório de compilação do projeto. Esta informação é referenciada na imagem base, ou seja, image da qual você está 'buildando' o seu código.
    displayName: Output directory
    value: build
    require: false

  - name: GITHUB_WEBHOOK_SECRET
    description: Secret uusada para configurar o webhook do Github.
    displayName: GitHub Webhook Secret
    require: true
    #É possível criar a secret ao executar o template(apply) através de uma expressão regular.
    from: '[a-zA-Z0-9]{40}'
    generate: expression

  - name: GENERIC_WEBHOOK_SECRET
    description: Secret uusada para configurar o webhook do Genérico.
    displayName: Generic Webhook Secret
    require: true
    #É possível criar a secret ao executar o template(apply) através de uma expressão regular.
    from: '[a-zA-Z0-9]{40}'
    generate: expression

  - name: GITLAB_WEBHOOK_SECRET
    description: Senha gerada para webhook gitlab.
    displayName: Token de acesso para o webhook gitlab
    from: "[a-zA-Z0-9]{40}"
    generate: expression
